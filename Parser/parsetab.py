
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ADDOP ARRAY ASSIGNOP BEGIN BOOLEAN CHAR CONST DO DOUBLEDOT ELSE END FOR FUNCTION ID IF INTEGER LETTER MULOP NOT NUM OF PROCEDURE PROGRAM READ REAL RELOP THEN TO VAR WRITEprogramstruct : program_head ';' program_body '.' program_head : PROGRAM ID '(' idlist ')'\n                        | PROGRAM IDprogram_body : const_declarations var_declarations subprogram_declarations compound_statementidlist : ID\n                  | idlist ',' IDconst_declarations : empty\n                              | CONST const_declaration ';' const_declaration : ID RELOP const_value\n                             | const_declaration ';' ID RELOP const_valueconst_value : ADDOP NUM  \n                       | NUM\n                       | LETTERvar_declarations : empty\n                            | VAR var_declaration ';' var_declaration : idlist ':' type\n                           | var_declaration ';' idlist ':' typetype : basic_type\n                | ARRAY '[' period ']' OF basic_typebasic_type : INTEGER\n                      | REAL\n                      | BOOLEAN\n                      | CHARperiod : NUM DOUBLEDOT NUM\n                  | period ',' NUM DOUBLEDOT NUMsubprogram_declarations : empty\n                                   | subprogram_declarations subprogram ';' subprogram : subprogram_head ';' subprogram_bodysubprogram_head : procedure ID formal_parameter\n                           | function ID formal_parameter ':' basic_typeprocedure : PROCEDUREfunction : FUNCTIONformal_parameter : empty\n                            | '(' parameter_list ')' parameter_list : parameter\n                          | parameter_list ';' parameterparameter : var_parameter\n                     | value_parametervar_parameter : VAR value_parametervalue_parameter : idlist ':' basic_typesubprogram_body : const_declarations var_declarations compound_statementcompound_statement : BEGIN statement_list ENDstatement_list : statement\n                          | statement_list ';' statementstatement : empty\n                     | variable ASSIGNOP expression\n                     | procedure_call\n                     | compound_statement\n                     | IF expression THEN statement else_part\n                     | FOR ID ASSIGNOP expression TO expression DO statement\n                     | READ '(' variable_list ')'\n                     | WRITE '(' expression_list ')' variable_list : variable\n                         | variable_list ',' variablevariable : ID id_varpartid_varpart : empty\n                      | '[' expression_list ']' procedure_call : ID\n                          | ID '(' expression_list ')' else_part : empty\n                     | ELSE statementexpression_list : expression\n                           | expression_list ',' expressionexpression : simple_expression\n                      | simple_expression RELOP simple_expressionsimple_expression : term\n                             | simple_expression ADDOP termterm : factor\n                | term MULOP factorfactor : NUM\n                  | variable\n                  | '(' expression ')'\n                  | ID '(' expression_list ')' \n                  | NOT factor\n                  | ADDOP factorempty :"
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programstruct':([0,],[1,]),'program_head':([0,],[2,]),'program_body':([4,],[6,]),'const_declarations':([4,55,],[7,89,]),'empty':([4,7,12,29,52,55,56,57,69,79,89,99,113,126,150,164,],[8,13,20,46,84,8,91,91,46,84,13,46,84,149,46,46,]),'var_declarations':([7,89,],[12,115,]),'const_declaration':([9,],[15,]),'idlist':([10,14,35,92,120,141,],[18,22,58,121,121,121,]),'subprogram_declarations':([12,],[19,]),'var_declaration':([14,],[21,]),'compound_statement':([19,29,69,99,115,150,164,],[27,49,49,49,139,49,49,]),'subprogram':([19,],[28,]),'subprogram_head':([19,],[30,]),'procedure':([19,],[31,]),'function':([19,],[32,]),'const_value':([24,66,],[38,96,]),'statement_list':([29,],[44,]),'statement':([29,69,99,150,164,],[45,97,126,160,166,]),'variable':([29,50,69,70,74,78,80,83,85,86,87,99,100,101,102,105,107,134,137,150,152,164,],[47,77,47,77,77,77,77,77,77,112,77,47,77,77,77,77,77,77,154,47,77,47,]),'procedure_call':([29,69,99,150,164,],[48,48,48,48,48,]),'type':([36,94,],[59,123,]),'basic_type':([36,94,122,143,157,],[60,60,144,156,162,]),'expression':([50,70,78,83,85,87,105,107,134,152,],[71,98,104,109,109,109,109,132,153,161,]),'simple_expression':([50,70,78,83,85,87,100,105,107,134,152,],[72,72,72,72,72,72,127,72,72,72,72,]),'term':([50,70,78,83,85,87,100,101,105,107,134,152,],[73,73,73,73,73,73,73,128,73,73,73,73,]),'factor':([50,70,74,78,80,83,85,87,100,101,102,105,107,134,152,],[75,75,103,75,106,75,75,75,75,75,129,75,75,75,75,]),'id_varpart':([52,79,113,],[82,82,82,]),'subprogram_body':([55,],[88,]),'formal_parameter':([56,57,],[90,93,]),'expression_list':([83,85,87,105,],[108,110,114,131,]),'variable_list':([86,],[111,]),'parameter_list':([92,],[116,]),'parameter':([92,141,],[117,155,]),'var_parameter':([92,141,],[118,118,]),'value_parameter':([92,120,141,],[119,142,119,]),'period':([95,],[124,]),'else_part':([126,],[148,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programstruct","S'",1,None,None,None),
  ('programstruct -> program_head ; program_body .','programstruct',4,'p_programstruct','Parser.py',21),
  ('program_head -> PROGRAM ID ( idlist )','program_head',5,'p_program_head','Parser.py',35),
  ('program_head -> PROGRAM ID','program_head',2,'p_program_head','Parser.py',36),
  ('program_body -> const_declarations var_declarations subprogram_declarations compound_statement','program_body',4,'p_program_body','Parser.py',56),
  ('idlist -> ID','idlist',1,'p_idlist','Parser.py',70),
  ('idlist -> idlist , ID','idlist',3,'p_idlist','Parser.py',71),
  ('const_declarations -> empty','const_declarations',1,'p_const_declarations','Parser.py',94),
  ('const_declarations -> CONST const_declaration ;','const_declarations',3,'p_const_declarations','Parser.py',95),
  ('const_declaration -> ID RELOP const_value','const_declaration',3,'p_const_declaration','Parser.py',108),
  ('const_declaration -> const_declaration ; ID RELOP const_value','const_declaration',5,'p_const_declaration','Parser.py',109),
  ('const_value -> ADDOP NUM','const_value',2,'p_const_value','Parser.py',178),
  ('const_value -> NUM','const_value',1,'p_const_value','Parser.py',179),
  ('const_value -> LETTER','const_value',1,'p_const_value','Parser.py',180),
  ('var_declarations -> empty','var_declarations',1,'p_var_declarations','Parser.py',223),
  ('var_declarations -> VAR var_declaration ;','var_declarations',3,'p_var_declarations','Parser.py',224),
  ('var_declaration -> idlist : type','var_declaration',3,'p_var_declaration','Parser.py',237),
  ('var_declaration -> var_declaration ; idlist : type','var_declaration',5,'p_var_declaration','Parser.py',238),
  ('type -> basic_type','type',1,'p_type','Parser.py',302),
  ('type -> ARRAY [ period ] OF basic_type','type',6,'p_type','Parser.py',303),
  ('basic_type -> INTEGER','basic_type',1,'p_basic_type','Parser.py',324),
  ('basic_type -> REAL','basic_type',1,'p_basic_type','Parser.py',325),
  ('basic_type -> BOOLEAN','basic_type',1,'p_basic_type','Parser.py',326),
  ('basic_type -> CHAR','basic_type',1,'p_basic_type','Parser.py',327),
  ('period -> NUM DOUBLEDOT NUM','period',3,'p_period','Parser.py',339),
  ('period -> period , NUM DOUBLEDOT NUM','period',5,'p_period','Parser.py',340),
  ('subprogram_declarations -> empty','subprogram_declarations',1,'p_subprogram_declarations','Parser.py',417),
  ('subprogram_declarations -> subprogram_declarations subprogram ;','subprogram_declarations',3,'p_subprogram_declarations','Parser.py',418),
  ('subprogram -> subprogram_head ; subprogram_body','subprogram',3,'p_subprogram','Parser.py',434),
  ('subprogram_head -> procedure ID formal_parameter','subprogram_head',3,'p_subprogram_head','Parser.py',454),
  ('subprogram_head -> function ID formal_parameter : basic_type','subprogram_head',5,'p_subprogram_head','Parser.py',455),
  ('procedure -> PROCEDURE','procedure',1,'p_procedure','Parser.py',505),
  ('function -> FUNCTION','function',1,'p_function','Parser.py',510),
  ('formal_parameter -> empty','formal_parameter',1,'p_formal_parameter','Parser.py',515),
  ('formal_parameter -> ( parameter_list )','formal_parameter',3,'p_formal_parameter','Parser.py',516),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','Parser.py',537),
  ('parameter_list -> parameter_list ; parameter','parameter_list',3,'p_parameter_list','Parser.py',538),
  ('parameter -> var_parameter','parameter',1,'p_parameter','Parser.py',569),
  ('parameter -> value_parameter','parameter',1,'p_parameter','Parser.py',570),
  ('var_parameter -> VAR value_parameter','var_parameter',2,'p_var_parameter','Parser.py',582),
  ('value_parameter -> idlist : basic_type','value_parameter',3,'p_value_parameter','Parser.py',596),
  ('subprogram_body -> const_declarations var_declarations compound_statement','subprogram_body',3,'p_subprogram_body','Parser.py',626),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Parser.py',639),
  ('statement_list -> statement','statement_list',1,'p_statement_list','Parser.py',648),
  ('statement_list -> statement_list ; statement','statement_list',3,'p_statement_list','Parser.py',649),
  ('statement -> empty','statement',1,'p_statement','Parser.py',670),
  ('statement -> variable ASSIGNOP expression','statement',3,'p_statement','Parser.py',671),
  ('statement -> procedure_call','statement',1,'p_statement','Parser.py',672),
  ('statement -> compound_statement','statement',1,'p_statement','Parser.py',673),
  ('statement -> IF expression THEN statement else_part','statement',5,'p_statement','Parser.py',674),
  ('statement -> FOR ID ASSIGNOP expression TO expression DO statement','statement',8,'p_statement','Parser.py',675),
  ('statement -> READ ( variable_list )','statement',4,'p_statement','Parser.py',676),
  ('statement -> WRITE ( expression_list )','statement',4,'p_statement','Parser.py',677),
  ('variable_list -> variable','variable_list',1,'p_variable_list','Parser.py',789),
  ('variable_list -> variable_list , variable','variable_list',3,'p_variable_list','Parser.py',790),
  ('variable -> ID id_varpart','variable',2,'p_variable','Parser.py',811),
  ('id_varpart -> empty','id_varpart',1,'p_id_varpart','Parser.py',838),
  ('id_varpart -> [ expression_list ]','id_varpart',3,'p_id_varpart','Parser.py',839),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','Parser.py',851),
  ('procedure_call -> ID ( expression_list )','procedure_call',4,'p_procedure_call','Parser.py',852),
  ('else_part -> empty','else_part',1,'p_else_part','Parser.py',881),
  ('else_part -> ELSE statement','else_part',2,'p_else_part','Parser.py',882),
  ('expression_list -> expression','expression_list',1,'p_expression_list','Parser.py',899),
  ('expression_list -> expression_list , expression','expression_list',3,'p_expression_list','Parser.py',900),
  ('expression -> simple_expression','expression',1,'p_expression','Parser.py',923),
  ('expression -> simple_expression RELOP simple_expression','expression',3,'p_expression','Parser.py',924),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','Parser.py',946),
  ('simple_expression -> simple_expression ADDOP term','simple_expression',3,'p_simple_expression','Parser.py',947),
  ('term -> factor','term',1,'p_term','Parser.py',969),
  ('term -> term MULOP factor','term',3,'p_term','Parser.py',970),
  ('factor -> NUM','factor',1,'p_factor','Parser.py',992),
  ('factor -> variable','factor',1,'p_factor','Parser.py',993),
  ('factor -> ( expression )','factor',3,'p_factor','Parser.py',994),
  ('factor -> ID ( expression_list )','factor',4,'p_factor','Parser.py',995),
  ('factor -> NOT factor','factor',2,'p_factor','Parser.py',996),
  ('factor -> ADDOP factor','factor',2,'p_factor','Parser.py',997),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',1070),
]
